Product Requirements Document (PRD)

Project Title: AI-Enhanced Classroom Web App (Flask + HTML + Gemini)

Overview
A simple and modern web application where teachers can manage classrooms and students, upload materials, and track student learning. Students can log in, view materials, and interact with AI-powered features to generate personalized study guides and self-evaluation quizzes.

Goals
Enable teachers to manage classes, materials, and students.

Enable students to view classes and materials.

Use Gemini (Google AI) to generate:

Personalized study guides

Self-evaluation quizzes (MCQ, True/False, Essay)

Automatic feedback and scoring

Ensure all self-evaluations are saved for teacher review.

Must be lightweight, mobile-friendly (PWA), and JavaScript-minimal.

Features
Teacher Features

[ ] Register/login 

[ ] Create/edit/delete classrooms

[ ] Add/remove students via email

[ ] Upload class materials (PDF, Text, etc.)

[ ] View student self-evaluation results (per class, per student)

[ ] Export reports (CSV/PDF)

Student Features

[ ] Login 

[ ] View list of enrolled classes

[ ] Join class using invitation code/email

[ ] Access class materials

[ ] Click “Generate Study Guide” (via Gemini)

[ ] Click “Generate Self Evaluation”:

Choose question type: MCQ, T/F, Essay

Get quiz generated by Gemini

Answer and submit

Get scored: Correct / Partially Correct / Incorrect

Receive feedback

[ ] View history of self-evaluation with scores and feedback

AI Integration (Gemini)

[ ] Use RAG (Retrieval-Augmented Generation): Each class's materials are the knowledge base for that class

[ ] Secure API key handling

[ ] Context-aware generation (based on selected material)

[ ] Scoring and feedback engine

PWA Support

[ ] manifest.json for PWA metadata

[ ] serviceWorker.js for offline support (caching HTML/CSS)

[ ] Mobile responsive layout (Tailwind CSS)

Tech Stack
Layer Technology

Backend Python (Flask or FastAPI)
Frontend HTML5 + Tailwind CSS
Interactivity htmx (optional, no heavy JS)
AI Gemini API (Google)
Database Supabase (PostgreSQL) or SQLite
Deployment Render / Railway / Docker

Database Schema (Simplified)
User (id, email, role: teacher/student)

Classroom (id, name, teacher_id)

Enrollment (id, classroom_id, student_id)

Material (id, classroom_id, title, content)

SelfEvaluation (id, student_id, classroom_id, material_id, answers, result_json, timestamp)

Constraints
No Vue/React; HTML and Python only.

PWA support is required.

Minimal JS; use htmx for AJAX if needed.

Gemini API integration must be done securely and context-aware per class.

Dont add anything else, you need to ask me if you want to add anything
